# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'smileAttendanceGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import cv2
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QFileDialog
import attendance_checker as ac
import params


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(509, 373)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 10, 471, 91))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(36)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(20, 100, 461, 241))
        self.frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.check_attendance_button = QtWidgets.QPushButton(self.frame)
        self.check_attendance_button.setGeometry(QtCore.QRect(150, 170, 171, 51))
        self.check_attendance_button.setObjectName("check_attendance_button")
        self.layoutWidget = QtWidgets.QWidget(self.frame)
        self.layoutWidget.setGeometry(QtCore.QRect(20, 10, 441, 31))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.input_lbl = QtWidgets.QLabel(self.layoutWidget)
        self.input_lbl.setObjectName("input_lbl")
        self.horizontalLayout.addWidget(self.input_lbl)
        self.input_txt = QtWidgets.QTextEdit(self.layoutWidget)
        self.input_txt.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.input_txt.setObjectName("input_txt")
        self.horizontalLayout.addWidget(self.input_txt)
        self.input_browse_button = QtWidgets.QPushButton(self.layoutWidget)
        self.input_browse_button.setObjectName("input_browse_button")
        self.horizontalLayout.addWidget(self.input_browse_button)
        self.layoutWidget1 = QtWidgets.QWidget(self.frame)
        self.layoutWidget1.setGeometry(QtCore.QRect(10, 40, 451, 31))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.output_lbl = QtWidgets.QLabel(self.layoutWidget1)
        self.output_lbl.setObjectName("output_lbl")
        self.horizontalLayout_3.addWidget(self.output_lbl)
        self.output_txt = QtWidgets.QTextEdit(self.layoutWidget1)
        self.output_txt.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.output_txt.setObjectName("output_txt")
        self.horizontalLayout_3.addWidget(self.output_txt)
        self.output_browse_button = QtWidgets.QPushButton(self.layoutWidget1)
        self.output_browse_button.setObjectName("output_browse_button")
        self.horizontalLayout_3.addWidget(self.output_browse_button)
        self.layoutWidget_2 = QtWidgets.QWidget(self.frame)
        self.layoutWidget_2.setGeometry(QtCore.QRect(250, 120, 143, 28))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.layoutWidget_2)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.end_time_lbl = QtWidgets.QLabel(self.layoutWidget_2)
        self.end_time_lbl.setObjectName("end_time_lbl")
        self.horizontalLayout_8.addWidget(self.end_time_lbl)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setContentsMargins(-1, -1, 0, -1)
        self.horizontalLayout_9.setSpacing(0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.end_time_min = QtWidgets.QSpinBox(self.layoutWidget_2)
        self.end_time_min.setMaximum(999)
        self.end_time_min.setObjectName("end_time_min")
        self.horizontalLayout_9.addWidget(self.end_time_min)
        self.end_time_sec = QtWidgets.QSpinBox(self.layoutWidget_2)
        self.end_time_sec.setMaximum(60)
        self.end_time_sec.setObjectName("end_time_sec")
        self.horizontalLayout_9.addWidget(self.end_time_sec)
        self.horizontalLayout_8.addLayout(self.horizontalLayout_9)
        self.widget = QtWidgets.QWidget(self.frame)
        self.widget.setGeometry(QtCore.QRect(80, 120, 150, 28))
        self.widget.setObjectName("widget")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.start_time_lbl = QtWidgets.QLabel(self.widget)
        self.start_time_lbl.setObjectName("start_time_lbl")
        self.horizontalLayout_7.addWidget(self.start_time_lbl)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setContentsMargins(-1, -1, 0, -1)
        self.horizontalLayout_6.setSpacing(0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.start_time_min = QtWidgets.QSpinBox(self.widget)
        self.start_time_min.setMaximum(999)
        self.start_time_min.setObjectName("start_time_min")
        self.horizontalLayout_6.addWidget(self.start_time_min)
        self.start_time_sec = QtWidgets.QSpinBox(self.widget)
        self.start_time_sec.setMaximum(60)
        self.start_time_sec.setObjectName("start_time_sec")
        self.horizontalLayout_6.addWidget(self.start_time_sec)
        self.horizontalLayout_7.addLayout(self.horizontalLayout_6)
        self.widget1 = QtWidgets.QWidget(self.frame)
        self.widget1.setGeometry(QtCore.QRect(120, 80, 253, 26))
        self.widget1.setObjectName("widget1")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget1)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.participants_num_lbl = QtWidgets.QLabel(self.widget1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.participants_num_lbl.sizePolicy().hasHeightForWidth())
        self.participants_num_lbl.setSizePolicy(sizePolicy)
        self.participants_num_lbl.setObjectName("participants_num_lbl")
        self.horizontalLayout_2.addWidget(self.participants_num_lbl)
        self.participants_num_input = QtWidgets.QComboBox(self.widget1)
        self.participants_num_input.setObjectName("participants_num_input")
        self.horizontalLayout_2.addWidget(self.participants_num_input)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Smile Attendance"))
        self.check_attendance_button.setText(_translate("MainWindow", "Check Attendance !"))
        self.input_lbl.setText(_translate("MainWindow", "Video Input "))
        self.input_browse_button.setText(_translate("MainWindow", "Browse"))
        self.output_lbl.setText(_translate("MainWindow", "Output Folder"))
        self.output_browse_button.setText(_translate("MainWindow", "Browse"))
        self.end_time_lbl.setText(_translate("MainWindow", "End:"))
        self.start_time_lbl.setText(_translate("MainWindow", "Start:"))
        self.participants_num_lbl.setText(_translate("MainWindow", "Number Of Participants"))
        self.check_attendance_button.clicked.connect(self.check_attendance)
        self.input_browse_button.clicked.connect(self.input_browse)
        self.output_browse_button.clicked.connect(self.output_browse)
        self.participants_num_input.addItems([item for item in params.offset])
        self.start_time_min.setDisabled(True)
        self.start_time_sec.setDisabled(True)
        self.end_time_min.setDisabled(True)
        self.end_time_sec.setDisabled(True)
        self.end_time_min.valueChanged.connect(self.end_time_min_handler)
        self.start_time_min.valueChanged.connect(self.start_time_min_handler)
        self.end_time_sec.valueChanged.connect(self.end_time_sec_handler)

    def end_time_sec_handler(self, value):
        if self.start_time_min.value() == self.end_time_min.value():
            self.start_time_sec.setMaximum(value)

    def start_time_min_handler(self, value):
        if value == self.end_time_min.value():
            self.start_time_sec.setMaximum(self.end_time_sec.value())
        else:
            self.start_time_sec.setMaximum(59)

    def end_time_min_handler(self, value):
        if value == int(self.video_length):
            self.end_time_sec.setMaximum(int(self.video_length%1*60))
        else:
            self.end_time_sec.setMaximum(59)
        if value == self.start_time_min.value():
            self.start_time_sec.setMaximum(self.end_time_sec.value())
        else:
            self.start_time_sec.setMaximum(59)
        self.start_time_min.setMaximum(value)

    def input_browse(self):
        """
        Action for the input_browse_button, let user select a file in his computer and store to path to it
        """
        video_path, _ = QFileDialog.getOpenFileName(caption="Select Zoom Video", filter='mp4(*.mp4)')
        self.input_txt.setText(video_path)
        video = cv2.VideoCapture(video_path)
        video.set(cv2.CAP_PROP_POS_AVI_RATIO, 1)
        self.video_length = (video.get(cv2.CAP_PROP_POS_MSEC)/1000.0 + 1) / 60
        self.end_time_sec.setDisabled(False)
        self.start_time_min.setDisabled(False)
        self.start_time_sec.setDisabled(False)
        self.end_time_min.setDisabled(False)
        self.end_time_min.setMaximum(int(self.video_length))
        self.end_time_min_handler(int(self.video_length))
        self.end_time_min.setValue(int(self.video_length))
        self.end_time_sec.setValue(int(self.video_length%1*60))
        self.start_time_min_handler(0)

    def output_browse(self):
        """
        Action for the output_browse_button, let user select a folder from his computer and store the path to it
        """
        output_path = QFileDialog.getExistingDirectory(caption="Select Zoom Video")
        self.output_txt.setText(output_path)

    def check_attendance(self):
        """
        Action for the check_attendance_button. Checks all the users who smiled in the stored input video,
        and stores the output in a txt file inside the given output folder
        """
        input_video = self.input_txt.toPlainText()
        num_of_participants = int(self.participants_num_input.currentText())
        output_folder = self.output_txt.toPlainText()
        start_time = self.start_time_min.value() * 60 + self.start_time_sec.value()
        end_time = self.end_time_min.value() * 60 + self.end_time_sec.value()
        if input_video == "" or output_folder == "":
            self.show_pop_box("Error", "At least one of the inputs is not filled")
            return
        if self.video_length > 5 and (end_time - start_time) < 5:
            self.show_pop_box("Error", 'Attendance check time has to be greater than 5 seconds')
            return
        try:
            ac.check_attendance(input_video, num_of_participants , output_folder, start_time, end_time)
        except Exception as e:
            self.show_pop_box("Error", str(e))
            return
        self.show_pop_box('Finished !', 'Attendance check finished!\nresults on folder:\n\n' + output_folder)

    def show_pop_box(self, title, text):
        msg = QMessageBox()
        msg.setWindowTitle(title)
        msg.setText(text)
        msg.exec_()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
